import jsPDF from 'jspdf';

export interface DocumentData {
  type: string;
  product: any;
  exporter: any;
  order?: any;
}

export const generatePDF = (documentData: DocumentData): void => {
  const { type, product, exporter, order } = documentData;
  
  // Create new PDF document (A4 size)
  const doc = new jsPDF('portrait', 'mm', 'a4');
  const pageWidth = 210;
  const pageHeight = 297;
  const margin = 20;
  const contentWidth = pageWidth - (margin * 2);
  
  // Set font
  doc.setFont('helvetica');
  
  // Header
  doc.setFontSize(20);
  doc.setFont('helvetica', 'bold');
  doc.text(getDocumentTitle(type), margin, 30);
  
  // Company letterhead
  doc.setFontSize(12);
  doc.setFont('helvetica', 'normal');
  doc.text(exporter.company_name || 'Your Company Name', margin, 45);
  doc.setFontSize(10);
  doc.text(exporter.company_address || 'Company Address', margin, 52);
  
  // Document number and date
  doc.setFontSize(10);
  const docNumber = `DOC-${Date.now().toString().slice(-6)}`;
  const currentDate = new Date().toLocaleDateString();
  doc.text(`Document No: ${docNumber}`, pageWidth - margin - 60, 45);
  doc.text(`Date: ${currentDate}`, pageWidth - margin - 60, 52);
  
  // Line separator
  doc.setLineWidth(0.5);
  doc.line(margin, 60, pageWidth - margin, 60);
  
  let yPosition = 75;
  
  // Document-specific content
  switch (type) {
    case 'commercial_invoice':
      yPosition = generateCommercialInvoice(doc, product, exporter, order, yPosition, margin, contentWidth);
      break;
    case 'packing_list':
      yPosition = generatePackingList(doc, product, exporter, order, yPosition, margin, contentWidth);
      break;
    case 'shipping_bill':
      yPosition = generateShippingBill(doc, product, exporter, yPosition, margin, contentWidth);
      break;
    case 'letter_of_undertaking':
      yPosition = generateLetterOfUndertaking(doc, product, exporter, yPosition, margin, contentWidth);
      break;
    case 'certificate_of_origin':
      yPosition = generateCertificateOfOrigin(doc, product, exporter, yPosition, margin, contentWidth);
      break;
  }
  
  // Footer
  doc.setFontSize(8);
  doc.setFont('helvetica', 'italic');
  doc.text('This document is computer generated and does not require signature.', margin, pageHeight - 15);
  doc.text(`Generated by CrossWise on ${currentDate}`, margin, pageHeight - 10);
  
  // Save the PDF
  const fileName = `${getDocumentTitle(type).replace(/\s+/g, '_')}_${docNumber}.pdf`;
  doc.save(fileName);
};

const getDocumentTitle = (type: string): string => {
  const titles = {
    commercial_invoice: 'COMMERCIAL INVOICE',
    packing_list: 'PACKING LIST',
    shipping_bill: 'SHIPPING BILL',
    letter_of_undertaking: 'LETTER OF UNDERTAKING',
    certificate_of_origin: 'CERTIFICATE OF ORIGIN',
  };
  return titles[type as keyof typeof titles] || 'EXPORT DOCUMENT';
};

const generateCommercialInvoice = (doc: jsPDF, product: any, exporter: any, order: any, yPos: number, margin: number, contentWidth: number): number => {
  let y = yPos;
  
  // Exporter details
  doc.setFontSize(12);
  doc.setFont('helvetica', 'bold');
  doc.text('EXPORTER:', margin, y);
  y += 7;
  
  doc.setFont('helvetica', 'normal');
  doc.setFontSize(10);
  doc.text(exporter.company_name || 'Company Name', margin, y);
  y += 5;
  doc.text(exporter.company_address || 'Company Address', margin, y);
  y += 5;
  doc.text(`IEC: ${exporter.iec || 'N/A'}`, margin, y);
  y += 5;
  doc.text(`PAN: ${exporter.pan || 'N/A'}`, margin, y);
  y += 15;
  
  // Consignee details
  doc.setFontSize(12);
  doc.setFont('helvetica', 'bold');
  doc.text('CONSIGNEE:', margin, y);
  y += 7;
  
  doc.setFont('helvetica', 'normal');
  doc.setFontSize(10);
  doc.text(order?.shipping_address || 'Buyer Address', margin, y);
  y += 15;
  
  // Product details table
  doc.setFontSize(12);
  doc.setFont('helvetica', 'bold');
  doc.text('PRODUCT DETAILS:', margin, y);
  y += 10;
  
  // Table headers
  doc.setFontSize(10);
  doc.setFont('helvetica', 'bold');
  doc.text('Description', margin, y);
  doc.text('HS Code', margin + 60, y);
  doc.text('Qty', margin + 100, y);
  doc.text('Unit Price', margin + 120, y);
  doc.text('Total', margin + 150, y);
  y += 5;
  
  // Table line
  doc.setLineWidth(0.3);
  doc.line(margin, y, margin + contentWidth, y);
  y += 8;
  
  // Product row
  doc.setFont('helvetica', 'normal');
  doc.text(product.product_name, margin, y);
  doc.text(product.hs_code, margin + 60, y);
  doc.text((order?.quantity || 1).toString(), margin + 100, y);
  doc.text(`$${product.base_price.toFixed(2)}`, margin + 120, y);
  doc.text(`$${((order?.quantity || 1) * product.base_price).toFixed(2)}`, margin + 150, y);
  y += 15;
  
  // Total section
  doc.setLineWidth(0.3);
  doc.line(margin + 100, y, margin + contentWidth, y);
  y += 8;
  
  const subtotal = (order?.quantity || 1) * product.base_price;
  doc.text('Subtotal:', margin + 120, y);
  doc.text(`$${subtotal.toFixed(2)}`, margin + 150, y);
  y += 7;
  
  if (order?.duty_amount > 0) {
    doc.text(`Duty (${product.duty_rate}):`, margin + 120, y);
    doc.text(`$${order.duty_amount.toFixed(2)}`, margin + 150, y);
    y += 7;
  }
  
  doc.setFont('helvetica', 'bold');
  doc.text('TOTAL:', margin + 120, y);
  doc.text(`$${(order?.total_amount || subtotal).toFixed(2)}`, margin + 150, y);
  
  return y + 20;
};

const generatePackingList = (doc: jsPDF, product: any, exporter: any, order: any, yPos: number, margin: number, contentWidth: number): number => {
  let y = yPos;
  
  // Exporter details
  doc.setFontSize(12);
  doc.setFont('helvetica', 'bold');
  doc.text('SHIPPER:', margin, y);
  y += 7;
  
  doc.setFont('helvetica', 'normal');
  doc.setFontSize(10);
  doc.text(exporter.company_name || 'Company Name', margin, y);
  y += 5;
  doc.text(exporter.company_address || 'Company Address', margin, y);
  y += 15;
  
  // Packing details
  doc.setFontSize(12);
  doc.setFont('helvetica', 'bold');
  doc.text('PACKING DETAILS:', margin, y);
  y += 10;
  
  doc.setFontSize(10);
  doc.setFont('helvetica', 'normal');
  doc.text(`Product: ${product.product_name}`, margin, y);
  y += 7;
  doc.text(`Quantity: ${order?.quantity || 1} units`, margin, y);
  y += 7;
  doc.text(`HS Code: ${product.hs_code}`, margin, y);
  y += 7;
  doc.text(`Gross Weight: ${((order?.quantity || 1) * 2).toFixed(2)} kg`, margin, y);
  y += 7;
  doc.text(`Net Weight: ${((order?.quantity || 1) * 1.8).toFixed(2)} kg`, margin, y);
  y += 7;
  doc.text(`Dimensions: ${order?.quantity || 1} carton(s)`, margin, y);
  
  return y + 20;
};

const generateShippingBill = (doc: jsPDF, product: any, exporter: any, yPos: number, margin: number, contentWidth: number): number => {
  let y = yPos;
  
  // Shipping bill header
  doc.setFontSize(12);
  doc.setFont('helvetica', 'bold');
  doc.text('SHIPPING BILL FOR EXPORT', margin, y);
  y += 15;
  
  // Exporter details
  doc.setFontSize(10);
  doc.setFont('helvetica', 'normal');
  doc.text(`Exporter Name: ${exporter.company_name || 'N/A'}`, margin, y);
  y += 7;
  doc.text(`IEC Code: ${exporter.iec || 'N/A'}`, margin, y);
  y += 7;
  doc.text(`AD Code: ${exporter.ad_code || 'N/A'}`, margin, y);
  y += 7;
  doc.text(`GST LUT: ${exporter.gst_lut || 'N/A'}`, margin, y);
  y += 15;
  
  // Product details
  doc.text(`Product Description: ${product.product_name}`, margin, y);
  y += 7;
  doc.text(`HS Code: ${product.hs_code}`, margin, y);
  y += 7;
  doc.text(`Destination Country: ${product.destination_country}`, margin, y);
  y += 7;
  doc.text(`FOB Value: $${product.base_price.toFixed(2)}`, margin, y);
  
  return y + 20;
};

const generateLetterOfUndertaking = (doc: jsPDF, product: any, exporter: any, yPos: number, margin: number, contentWidth: number): number => {
  let y = yPos;
  
  // LUT content
  doc.setFontSize(12);
  doc.setFont('helvetica', 'bold');
  doc.text('LETTER OF UNDERTAKING (LUT)', margin, y);
  y += 15;
  
  doc.setFontSize(10);
  doc.setFont('helvetica', 'normal');
  
  const lutText = `We, ${exporter.company_name || '[Company Name]'}, hereby undertake that the goods described below are intended for export and we shall export the said goods within the prescribed time limit.

Product Details:
- Description: ${product.product_name}
- HS Code: ${product.hs_code}
- Destination: ${product.destination_country}
- Value: $${product.base_price.toFixed(2)}

We further undertake to comply with all the conditions specified under the GST Act and Rules made thereunder.`;

  const lines = doc.splitTextToSize(lutText, contentWidth);
  doc.text(lines, margin, y);
  y += lines.length * 5 + 20;
  
  // Signature section
  doc.text('Authorized Signatory', margin, y);
  doc.text('Date: ' + new Date().toLocaleDateString(), margin + 100, y);
  
  return y + 20;
};

const generateCertificateOfOrigin = (doc: jsPDF, product: any, exporter: any, yPos: number, margin: number, contentWidth: number): number => {
  let y = yPos;
  
  // Certificate header
  doc.setFontSize(12);
  doc.setFont('helvetica', 'bold');
  doc.text('CERTIFICATE OF ORIGIN', margin, y);
  y += 15;
  
  doc.setFontSize(10);
  doc.setFont('helvetica', 'normal');
  
  const certText = `This is to certify that the goods described below are of Indian origin and have been manufactured/produced in India.

Exporter Details:
Company: ${exporter.company_name || '[Company Name]'}
Address: ${exporter.company_address || '[Company Address]'}
IEC: ${exporter.iec || '[IEC Number]'}

Product Details:
Description: ${product.product_name}
HS Code: ${product.hs_code}
Country of Origin: India
Destination: ${product.destination_country}

We hereby certify that the information given above is true and correct.`;

  const lines = doc.splitTextToSize(certText, contentWidth);
  doc.text(lines, margin, y);
  y += lines.length * 5 + 20;
  
  // Certification section
  doc.text('Certified by:', margin, y);
  doc.text('Chamber of Commerce', margin, y + 7);
  doc.text('Date: ' + new Date().toLocaleDateString(), margin + 100, y);
  
  return y + 20;
};